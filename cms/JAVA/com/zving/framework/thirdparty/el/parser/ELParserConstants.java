/* Generated By:JavaCC: Do not edit this line. ELParserConstants.java */
package com.zving.framework.thirdparty.el.parser;

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ELParserConstants {// NO_UCD

	/** End of File. */
	int EOF = 0;
	/** RegularExpression Id. */
	int NON_EXPRESSION_TEXT = 1;
	/** RegularExpression Id. */
	int START_EXPRESSION = 2;
	/** RegularExpression Id. */
	int INTEGER_LITERAL = 7;
	/** RegularExpression Id. */
	int FLOATING_POINT_LITERAL = 8;
	/** RegularExpression Id. */
	int EXPONENT = 9;
	/** RegularExpression Id. */
	int STRING_LITERAL = 10;
	/** RegularExpression Id. */
	int BADLY_ESCAPED_STRING_LITERAL = 11;
	/** RegularExpression Id. */
	int TRUE = 12;
	/** RegularExpression Id. */
	int FALSE = 13;
	/** RegularExpression Id. */
	int NULL = 14;
	/** RegularExpression Id. */
	int END_EXPRESSION = 15;
	/** RegularExpression Id. */
	int DOT = 16;
	/** RegularExpression Id. */
	int GT1 = 17;
	/** RegularExpression Id. */
	int GT2 = 18;
	/** RegularExpression Id. */
	int LT1 = 19;
	/** RegularExpression Id. */
	int LT2 = 20;
	/** RegularExpression Id. */
	int EQ1 = 21;
	/** RegularExpression Id. */
	int EQ2 = 22;
	/** RegularExpression Id. */
	int LE1 = 23;
	/** RegularExpression Id. */
	int LE2 = 24;
	/** RegularExpression Id. */
	int GE1 = 25;
	/** RegularExpression Id. */
	int GE2 = 26;
	/** RegularExpression Id. */
	int NE1 = 27;
	/** RegularExpression Id. */
	int NE2 = 28;
	/** RegularExpression Id. */
	int LPAREN = 29;
	/** RegularExpression Id. */
	int RPAREN = 30;
	/** RegularExpression Id. */
	int COMMA = 31;
	/** RegularExpression Id. */
	int COLON = 32;
	/** RegularExpression Id. */
	int LBRACKET = 33;
	/** RegularExpression Id. */
	int RBRACKET = 34;
	/** RegularExpression Id. */
	int PLUS = 35;
	/** RegularExpression Id. */
	int MINUS = 36;
	/** RegularExpression Id. */
	int MULTIPLY = 37;
	/** RegularExpression Id. */
	int DIVIDE1 = 38;
	/** RegularExpression Id. */
	int DIVIDE2 = 39;
	/** RegularExpression Id. */
	int MODULUS1 = 40;
	/** RegularExpression Id. */
	int MODULUS2 = 41;
	/** RegularExpression Id. */
	int NOT1 = 42;
	/** RegularExpression Id. */
	int NOT2 = 43;
	/** RegularExpression Id. */
	int AND1 = 44;
	/** RegularExpression Id. */
	int AND2 = 45;
	/** RegularExpression Id. */
	int OR1 = 46;
	/** RegularExpression Id. */
	int OR2 = 47;
	/** RegularExpression Id. */
	int EMPTY = 48;
	/** RegularExpression Id. */
	int COND = 49;
	/** RegularExpression Id. */
	int IDENTIFIER = 50;
	/** RegularExpression Id. */
	int IMPL_OBJ_START = 51;
	/** RegularExpression Id. */
	int LETTER = 52;
	/** RegularExpression Id. */
	int DIGIT = 53;
	/** RegularExpression Id. */
	int ILLEGAL_CHARACTER = 54;

	/** Lexical state. */
	int DEFAULT = 0;
	/** Lexical state. */
	int IN_EXPRESSION = 1;

	/** Literal token values. */
	String[] tokenImage = { "<EOF>", "<NON_EXPRESSION_TEXT>", "\"${\"", "\" \"", "\"\\t\"", "\"\\n\"", "\"\\r\"", "<INTEGER_LITERAL>",
			"<FLOATING_POINT_LITERAL>", "<EXPONENT>", "<STRING_LITERAL>", "<BADLY_ESCAPED_STRING_LITERAL>", "\"true\"", "\"false\"",
			"\"null\"", "\"}\"", "\".\"", "\">\"", "\"gt\"", "\"<\"", "\"lt\"", "\"==\"", "\"eq\"", "\"<=\"", "\"le\"", "\">=\"", "\"ge\"",
			"\"!=\"", "\"ne\"", "\"(\"", "\")\"", "\",\"", "\":\"", "\"[\"", "\"]\"", "\"+\"", "\"-\"", "\"*\"", "\"/\"", "\"div\"",
			"\"%\"", "\"mod\"", "\"not\"", "\"!\"", "\"and\"", "\"&&\"", "\"or\"", "\"||\"", "\"empty\"", "\"?\"", "<IDENTIFIER>", "\"#\"",
			"<LETTER>", "<DIGIT>", "<ILLEGAL_CHARACTER>", };

}
