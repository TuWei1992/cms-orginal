/* Generated By:JavaCC: Do not edit this line. ELParser.java */
package com.zving.framework.thirdparty.el.parser;

import java.util.ArrayList;
import java.util.List;

import com.zving.framework.thirdparty.el.ArraySuffix;
import com.zving.framework.thirdparty.el.BinaryOperatorExpression;
import com.zving.framework.thirdparty.el.BooleanLiteral;
import com.zving.framework.thirdparty.el.ComplexValue;
import com.zving.framework.thirdparty.el.ConditionalExpression;
import com.zving.framework.thirdparty.el.Expression;
import com.zving.framework.thirdparty.el.ExpressionString;
import com.zving.framework.thirdparty.el.FloatingPointLiteral;
import com.zving.framework.thirdparty.el.FunctionInvocation;
import com.zving.framework.thirdparty.el.IntegerLiteral;
import com.zving.framework.thirdparty.el.Literal;
import com.zving.framework.thirdparty.el.NamedValue;
import com.zving.framework.thirdparty.el.NullLiteral;
import com.zving.framework.thirdparty.el.PropertySuffix;
import com.zving.framework.thirdparty.el.StringLiteral;
import com.zving.framework.thirdparty.el.UnaryOperatorExpression;
import com.zving.framework.thirdparty.el.ValueSuffix;
import com.zving.framework.thirdparty.el.operator.AndOperator;
import com.zving.framework.thirdparty.el.operator.BinaryOperator;
import com.zving.framework.thirdparty.el.operator.DivideOperator;
import com.zving.framework.thirdparty.el.operator.EmptyOperator;
import com.zving.framework.thirdparty.el.operator.EqualsOperator;
import com.zving.framework.thirdparty.el.operator.GreaterThanOperator;
import com.zving.framework.thirdparty.el.operator.GreaterThanOrEqualsOperator;
import com.zving.framework.thirdparty.el.operator.LessThanOperator;
import com.zving.framework.thirdparty.el.operator.LessThanOrEqualsOperator;
import com.zving.framework.thirdparty.el.operator.MinusOperator;
import com.zving.framework.thirdparty.el.operator.ModulusOperator;
import com.zving.framework.thirdparty.el.operator.MultiplyOperator;
import com.zving.framework.thirdparty.el.operator.NotEqualsOperator;
import com.zving.framework.thirdparty.el.operator.NotOperator;
import com.zving.framework.thirdparty.el.operator.OrOperator;
import com.zving.framework.thirdparty.el.operator.PlusOperator;
import com.zving.framework.thirdparty.el.operator.UnaryMinusOperator;
import com.zving.framework.thirdparty.el.operator.UnaryOperator;

/**
 * Generated EL parser.
 * 
 * @author Nathan Abramson
 * @author Shawn Bayern
 */

public class ELParser implements ELParserConstants {// NO_UCD
	/**
	 * Returns a String if the expression string is a single String, an
	 * Expression if the expression string is a single Expression, an
	 * ExpressionString if it's a mixture of both.
	 **/
	final public Object ExpressionString() throws ELParseException {
		Object ret = "";
		List<Object> elems = null;
		Object elem;
		switch (jj_ntk == -1 ? jj_ntk() : jj_ntk) {
		case NON_EXPRESSION_TEXT:
			ret = AttrValueString();
			break;
		case START_EXPRESSION:
			ret = AttrValueExpression();
			break;
		default:
			jj_la1[0] = jj_gen;
			jj_consume_token(-1);
			throw new ELParseException();
		}
		label_1: while (true) {
			switch (jj_ntk == -1 ? jj_ntk() : jj_ntk) {
			case NON_EXPRESSION_TEXT:
			case START_EXPRESSION:
				;
				break;
			default:
				jj_la1[1] = jj_gen;
				break label_1;
			}
			switch (jj_ntk == -1 ? jj_ntk() : jj_ntk) {
			case NON_EXPRESSION_TEXT:
				elem = AttrValueString();
				break;
			case START_EXPRESSION:
				elem = AttrValueExpression();
				break;
			default:
				jj_la1[2] = jj_gen;
				jj_consume_token(-1);
				throw new ELParseException();
			}
			if (elems == null) {
				elems = new ArrayList<Object>();
				elems.add(ret);
			}
			elems.add(elem);
		}
		if (elems != null) {
			ret = new ExpressionString(elems.toArray());
		}
		return ret;
	}

	final public String AttrValueString() throws ELParseException {
		Token t;
		t = jj_consume_token(NON_EXPRESSION_TEXT);
		return t.image;
	}

	final public Expression AttrValueExpression() throws ELParseException {
		Expression exp;
		jj_consume_token(START_EXPRESSION);
		exp = Expression();
		jj_consume_token(END_EXPRESSION);
		return exp;
	}

	final public Expression Expression() throws ELParseException {
		Expression ret;
		if (jj_2_1(2147483647)) {
			ret = ConditionalExpression();
		} else {
			switch (jj_ntk == -1 ? jj_ntk() : jj_ntk) {
			case INTEGER_LITERAL:
			case FLOATING_POINT_LITERAL:
			case STRING_LITERAL:
			case TRUE:
			case FALSE:
			case NULL:
			case LPAREN:
			case MINUS:
			case NOT1:
			case NOT2:
			case EMPTY:
			case IDENTIFIER:
				ret = OrExpression();
				break;
			default:
				jj_la1[3] = jj_gen;
				jj_consume_token(-1);
				throw new ELParseException();
			}
		}
		return ret;
	}

	final public Expression OrExpression() throws ELParseException {
		Expression startExpression;
		BinaryOperator operator;
		Expression expression;
		List<BinaryOperator> operators = null;
		List<Expression> expressions = null;
		startExpression = AndExpression();
		label_2: while (true) {
			switch (jj_ntk == -1 ? jj_ntk() : jj_ntk) {
			case OR1:
			case OR2:
				;
				break;
			default:
				jj_la1[4] = jj_gen;
				break label_2;
			}
			switch (jj_ntk == -1 ? jj_ntk() : jj_ntk) {
			case OR1:
				jj_consume_token(OR1);
				break;
			case OR2:
				jj_consume_token(OR2);
				break;
			default:
				jj_la1[5] = jj_gen;
				jj_consume_token(-1);
				throw new ELParseException();
			}
			operator = OrOperator.SINGLETON;
			expression = AndExpression();
			if (operators == null) {
				operators = new ArrayList<BinaryOperator>();
				expressions = new ArrayList<Expression>();
			}
			operators.add(operator);
			expressions.add(expression);
		}
		if (operators != null) {
			return new BinaryOperatorExpression(startExpression, operators, expressions);
		} else {
			return startExpression;
		}
	}

	final public Expression AndExpression() throws ELParseException {
		Expression startExpression;
		BinaryOperator operator;
		Expression expression;
		List<BinaryOperator> operators = null;
		List<Expression> expressions = null;
		startExpression = EqualityExpression();
		label_3: while (true) {
			switch (jj_ntk == -1 ? jj_ntk() : jj_ntk) {
			case AND1:
			case AND2:
				;
				break;
			default:
				jj_la1[6] = jj_gen;
				break label_3;
			}
			switch (jj_ntk == -1 ? jj_ntk() : jj_ntk) {
			case AND1:
				jj_consume_token(AND1);
				break;
			case AND2:
				jj_consume_token(AND2);
				break;
			default:
				jj_la1[7] = jj_gen;
				jj_consume_token(-1);
				throw new ELParseException();
			}
			operator = AndOperator.SINGLETON;
			expression = EqualityExpression();
			if (operators == null) {
				operators = new ArrayList<BinaryOperator>();
				expressions = new ArrayList<Expression>();
			}
			operators.add(operator);
			expressions.add(expression);
		}
		if (operators != null) {
			return new BinaryOperatorExpression(startExpression, operators, expressions);
		} else {
			return startExpression;
		}
	}

	final public Expression EqualityExpression() throws ELParseException {
		Expression startExpression;
		BinaryOperator operator;
		Expression expression;
		List<BinaryOperator> operators = null;
		List<Expression> expressions = null;
		startExpression = RelationalExpression();
		label_4: while (true) {
			switch (jj_ntk == -1 ? jj_ntk() : jj_ntk) {
			case EQ1:
			case EQ2:
			case NE1:
			case NE2:
				;
				break;
			default:
				jj_la1[8] = jj_gen;
				break label_4;
			}
			switch (jj_ntk == -1 ? jj_ntk() : jj_ntk) {
			case EQ1:
			case EQ2:
				switch (jj_ntk == -1 ? jj_ntk() : jj_ntk) {
				case EQ1:
					jj_consume_token(EQ1);
					break;
				case EQ2:
					jj_consume_token(EQ2);
					break;
				default:
					jj_la1[9] = jj_gen;
					jj_consume_token(-1);
					throw new ELParseException();
				}
				operator = EqualsOperator.SINGLETON;
				break;
			case NE1:
			case NE2:
				switch (jj_ntk == -1 ? jj_ntk() : jj_ntk) {
				case NE1:
					jj_consume_token(NE1);
					break;
				case NE2:
					jj_consume_token(NE2);
					break;
				default:
					jj_la1[10] = jj_gen;
					jj_consume_token(-1);
					throw new ELParseException();
				}
				operator = NotEqualsOperator.SINGLETON;
				break;
			default:
				jj_la1[11] = jj_gen;
				jj_consume_token(-1);
				throw new ELParseException();
			}
			expression = RelationalExpression();
			if (operators == null) {
				operators = new ArrayList<BinaryOperator>();
				expressions = new ArrayList<Expression>();
			}
			operators.add(operator);
			expressions.add(expression);
		}
		if (operators != null) {
			return new BinaryOperatorExpression(startExpression, operators, expressions);
		} else {
			return startExpression;
		}
	}

	final public Expression RelationalExpression() throws ELParseException {
		Expression startExpression;
		BinaryOperator operator;
		Expression expression;
		List<BinaryOperator> operators = null;
		List<Expression> expressions = null;
		startExpression = AddExpression();
		label_5: while (true) {
			switch (jj_ntk == -1 ? jj_ntk() : jj_ntk) {
			case GT1:
			case GT2:
			case LT1:
			case LT2:
			case LE1:
			case LE2:
			case GE1:
			case GE2:
				break;
			default:
				jj_la1[12] = jj_gen;
				break label_5;
			}
			switch (jj_ntk == -1 ? jj_ntk() : jj_ntk) {
			case LT1:
			case LT2:
				switch (jj_ntk == -1 ? jj_ntk() : jj_ntk) {
				case LT1:
					jj_consume_token(LT1);
					break;
				case LT2:
					jj_consume_token(LT2);
					break;
				default:
					jj_la1[13] = jj_gen;
					jj_consume_token(-1);
					throw new ELParseException();
				}
				operator = LessThanOperator.SINGLETON;
				break;
			case GT1:
			case GT2:
				switch (jj_ntk == -1 ? jj_ntk() : jj_ntk) {
				case GT1:
					jj_consume_token(GT1);
					break;
				case GT2:
					jj_consume_token(GT2);
					break;
				default:
					jj_la1[14] = jj_gen;
					jj_consume_token(-1);
					throw new ELParseException();
				}
				operator = GreaterThanOperator.SINGLETON;
				break;
			case GE1:
			case GE2:
				switch (jj_ntk == -1 ? jj_ntk() : jj_ntk) {
				case GE1:
					jj_consume_token(GE1);
					break;
				case GE2:
					jj_consume_token(GE2);
					break;
				default:
					jj_la1[15] = jj_gen;
					jj_consume_token(-1);
					throw new ELParseException();
				}
				operator = GreaterThanOrEqualsOperator.SINGLETON;
				break;
			case LE1:
			case LE2:
				switch (jj_ntk == -1 ? jj_ntk() : jj_ntk) {
				case LE1:
					jj_consume_token(LE1);
					break;
				case LE2:
					jj_consume_token(LE2);
					break;
				default:
					jj_la1[16] = jj_gen;
					jj_consume_token(-1);
					throw new ELParseException();
				}
				operator = LessThanOrEqualsOperator.SINGLETON;
				break;
			default:
				jj_la1[17] = jj_gen;
				jj_consume_token(-1);
				throw new ELParseException();
			}
			expression = AddExpression();
			if (operators == null) {
				operators = new ArrayList<BinaryOperator>();
				expressions = new ArrayList<Expression>();
			}
			operators.add(operator);
			expressions.add(expression);
		}
		if (operators != null) {
			return new BinaryOperatorExpression(startExpression, operators, expressions);
		} else {
			return startExpression;
		}
	}

	final public Expression AddExpression() throws ELParseException {
		Expression startExpression;
		BinaryOperator operator;
		Expression expression;
		List<BinaryOperator> operators = null;
		List<Expression> expressions = null;
		startExpression = MultiplyExpression();
		label_6: while (true) {
			switch (jj_ntk == -1 ? jj_ntk() : jj_ntk) {
			case PLUS:
			case MINUS:
				;
				break;
			default:
				jj_la1[18] = jj_gen;
				break label_6;
			}
			switch (jj_ntk == -1 ? jj_ntk() : jj_ntk) {
			case PLUS:
				jj_consume_token(PLUS);
				operator = PlusOperator.SINGLETON;
				break;
			case MINUS:
				jj_consume_token(MINUS);
				operator = MinusOperator.SINGLETON;
				break;
			default:
				jj_la1[19] = jj_gen;
				jj_consume_token(-1);
				throw new ELParseException();
			}
			expression = MultiplyExpression();
			if (operators == null) {
				operators = new ArrayList<BinaryOperator>();
				expressions = new ArrayList<Expression>();
			}
			operators.add(operator);
			expressions.add(expression);
		}
		if (operators != null) {
			return new BinaryOperatorExpression(startExpression, operators, expressions);
		} else {
			return startExpression;
		}
	}

	final public Expression MultiplyExpression() throws ELParseException {
		Expression startExpression;
		BinaryOperator operator;
		Expression expression;
		List<BinaryOperator> operators = null;
		List<Expression> expressions = null;
		startExpression = UnaryExpression();
		label_7: while (true) {
			switch (jj_ntk == -1 ? jj_ntk() : jj_ntk) {
			case MULTIPLY:
			case DIVIDE1:
			case DIVIDE2:
			case MODULUS1:
			case MODULUS2:
				;
				break;
			default:
				jj_la1[20] = jj_gen;
				break label_7;
			}
			switch (jj_ntk == -1 ? jj_ntk() : jj_ntk) {
			case MULTIPLY:
				jj_consume_token(MULTIPLY);
				operator = MultiplyOperator.SINGLETON;
				break;
			case DIVIDE1:
			case DIVIDE2:
				switch (jj_ntk == -1 ? jj_ntk() : jj_ntk) {
				case DIVIDE1:
					jj_consume_token(DIVIDE1);
					break;
				case DIVIDE2:
					jj_consume_token(DIVIDE2);
					break;
				default:
					jj_la1[21] = jj_gen;
					jj_consume_token(-1);
					throw new ELParseException();
				}
				operator = DivideOperator.SINGLETON;
				break;
			case MODULUS1:
			case MODULUS2:
				switch (jj_ntk == -1 ? jj_ntk() : jj_ntk) {
				case MODULUS1:
					jj_consume_token(MODULUS1);
					break;
				case MODULUS2:
					jj_consume_token(MODULUS2);
					break;
				default:
					jj_la1[22] = jj_gen;
					jj_consume_token(-1);
					throw new ELParseException();
				}
				operator = ModulusOperator.SINGLETON;
				break;
			default:
				jj_la1[23] = jj_gen;
				jj_consume_token(-1);
				throw new ELParseException();
			}
			expression = UnaryExpression();
			if (operators == null) {
				operators = new ArrayList<BinaryOperator>();
				expressions = new ArrayList<Expression>();
			}
			operators.add(operator);
			expressions.add(expression);
		}
		if (operators != null) {
			return new BinaryOperatorExpression(startExpression, operators, expressions);
		} else {
			return startExpression;
		}
	}

	final public Expression ConditionalExpression() throws ELParseException {
		Expression condition, trueBranch, falseBranch;
		condition = OrExpression();
		jj_consume_token(COND);
		trueBranch = Expression();
		jj_consume_token(COLON);
		falseBranch = Expression();
		return new ConditionalExpression(condition, trueBranch, falseBranch);
	}

	final public Expression UnaryExpression() throws ELParseException {
		Expression expression;
		UnaryOperator singleOperator = null;
		UnaryOperator operator;
		List<UnaryOperator> operators = null;
		label_8: while (true) {
			switch (jj_ntk == -1 ? jj_ntk() : jj_ntk) {
			case MINUS:
			case NOT1:
			case NOT2:
			case EMPTY:
				;
				break;
			default:
				jj_la1[24] = jj_gen;
				break label_8;
			}
			switch (jj_ntk == -1 ? jj_ntk() : jj_ntk) {
			case NOT1:
			case NOT2:
				switch (jj_ntk == -1 ? jj_ntk() : jj_ntk) {
				case NOT1:
					jj_consume_token(NOT1);
					break;
				case NOT2:
					jj_consume_token(NOT2);
					break;
				default:
					jj_la1[25] = jj_gen;
					jj_consume_token(-1);
					throw new ELParseException();
				}
				operator = NotOperator.SINGLETON;
				break;
			case MINUS:
				jj_consume_token(MINUS);
				operator = UnaryMinusOperator.SINGLETON;
				break;
			case EMPTY:
				jj_consume_token(EMPTY);
				operator = EmptyOperator.SINGLETON;
				break;
			default:
				jj_la1[26] = jj_gen;
				jj_consume_token(-1);
				throw new ELParseException();
			}
			if (singleOperator == null) {
				singleOperator = operator;
			} else if (operators == null) {
				operators = new ArrayList<UnaryOperator>();
				operators.add(singleOperator);
				operators.add(operator);
			} else {
				operators.add(operator);
			}
		}
		expression = Value();
		if (operators != null) {
			return new UnaryOperatorExpression(null, operators, expression);
		} else if (singleOperator != null) {
			return new UnaryOperatorExpression(singleOperator, null, expression);
		} else {
			return expression;
		}
	}

	final public Expression Value() throws ELParseException {
		Expression prefix;
		ValueSuffix suffix;
		List<ValueSuffix> suffixes = null;
		prefix = ValuePrefix();
		label_9: while (true) {
			switch (jj_ntk == -1 ? jj_ntk() : jj_ntk) {
			case DOT:
			case LBRACKET:
				;
				break;
			default:
				jj_la1[27] = jj_gen;
				break label_9;
			}
			suffix = ValueSuffix();
			if (suffixes == null) {
				suffixes = new ArrayList<ValueSuffix>();
			}
			suffixes.add(suffix);
		}
		if (suffixes == null) {
			return prefix;
		} else {
			return new ComplexValue(prefix, suffixes);
		}
	}

	/**
	 * This is an element that can start a value
	 **/
	final public Expression ValuePrefix() throws ELParseException {
		Expression ret;
		switch (jj_ntk == -1 ? jj_ntk() : jj_ntk) {
		case INTEGER_LITERAL:
		case FLOATING_POINT_LITERAL:
		case STRING_LITERAL:
		case TRUE:
		case FALSE:
		case NULL:
			ret = Literal();
			break;
		case LPAREN:
			jj_consume_token(LPAREN);
			ret = Expression();
			jj_consume_token(RPAREN);
			break;
		default:
			jj_la1[28] = jj_gen;
			if (jj_2_2(2147483647)) {
				ret = FunctionInvocation();
			} else {
				switch (jj_ntk == -1 ? jj_ntk() : jj_ntk) {
				case IDENTIFIER:
					ret = NamedValue();
					break;
				default:
					jj_la1[29] = jj_gen;
					jj_consume_token(-1);
					throw new ELParseException();
				}
			}
		}
		return ret;
	}

	final public NamedValue NamedValue() throws ELParseException {
		Token t;
		t = jj_consume_token(IDENTIFIER);
		return new NamedValue(t.image);
	}

	final public FunctionInvocation FunctionInvocation() throws ELParseException {
		String qualifiedName;
		List<Expression> argumentList = new ArrayList<Expression>();
		Expression exp;
		qualifiedName = QualifiedName();
		jj_consume_token(LPAREN);
		switch (jj_ntk == -1 ? jj_ntk() : jj_ntk) {
		case INTEGER_LITERAL:
		case FLOATING_POINT_LITERAL:
		case STRING_LITERAL:
		case TRUE:
		case FALSE:
		case NULL:
		case LPAREN:
		case MINUS:
		case NOT1:
		case NOT2:
		case EMPTY:
		case IDENTIFIER:
			exp = Expression();
			argumentList.add(exp);
			label_10: while (true) {
				switch (jj_ntk == -1 ? jj_ntk() : jj_ntk) {
				case COMMA:
					break;
				default:
					jj_la1[30] = jj_gen;
					break label_10;
				}
				jj_consume_token(COMMA);
				exp = Expression();
				argumentList.add(exp);
			}
			break;
		default:
			jj_la1[31] = jj_gen;
		}
		jj_consume_token(RPAREN);
		return new FunctionInvocation(qualifiedName, argumentList);
	}

	final public ValueSuffix ValueSuffix() throws ELParseException {
		ValueSuffix suffix;
		switch (jj_ntk == -1 ? jj_ntk() : jj_ntk) {
		case DOT:
			suffix = PropertySuffix();
			break;
		case LBRACKET:
			suffix = ArraySuffix();
			break;
		default:
			jj_la1[32] = jj_gen;
			jj_consume_token(-1);
			throw new ELParseException();
		}
		return suffix;
	}

	final public PropertySuffix PropertySuffix() throws ELParseException {
		String property;
		jj_consume_token(DOT);
		property = Identifier();
		return new PropertySuffix(property);
	}

	final public ArraySuffix ArraySuffix() throws ELParseException {
		Expression index;
		jj_consume_token(LBRACKET);
		index = Expression();
		jj_consume_token(RBRACKET);
		return new ArraySuffix(index);
	}

	final public Literal Literal() throws ELParseException {
		Literal ret;
		switch (jj_ntk == -1 ? jj_ntk() : jj_ntk) {
		case TRUE:
		case FALSE:
			ret = BooleanLiteral();
			break;
		case INTEGER_LITERAL:
			ret = IntegerLiteral();
			break;
		case FLOATING_POINT_LITERAL:
			ret = FloatingPointLiteral();
			break;
		case STRING_LITERAL:
			ret = StringLiteral();
			break;
		case NULL:
			ret = NullLiteral();
			break;
		default:
			jj_la1[33] = jj_gen;
			jj_consume_token(-1);
			throw new ELParseException();
		}
		return ret;
	}

	final public BooleanLiteral BooleanLiteral() throws ELParseException {
		switch (jj_ntk == -1 ? jj_ntk() : jj_ntk) {
		case TRUE:
			jj_consume_token(TRUE);
			return BooleanLiteral.TRUE;
		case FALSE:
			jj_consume_token(FALSE);
			return BooleanLiteral.FALSE;
		default:
			jj_la1[34] = jj_gen;
			jj_consume_token(-1);
			throw new ELParseException();
		}
	}

	final public StringLiteral StringLiteral() throws ELParseException {
		Token t = jj_consume_token(STRING_LITERAL);
		return StringLiteral.fromToken(t.image);
	}

	final public IntegerLiteral IntegerLiteral() throws ELParseException {
		Token t = jj_consume_token(INTEGER_LITERAL);
		return new IntegerLiteral(t.image);
	}

	final public FloatingPointLiteral FloatingPointLiteral() throws ELParseException {
		Token t = jj_consume_token(FLOATING_POINT_LITERAL);
		return new FloatingPointLiteral(t.image);
	}

	final public NullLiteral NullLiteral() throws ELParseException {
		jj_consume_token(NULL);
		return NullLiteral.SINGLETON;
	}

	final public String Identifier() throws ELParseException {
		Token t = jj_consume_token(IDENTIFIER);
		return t.image;
	}

	final public String QualifiedName() throws ELParseException {
		String prefix = null, localPart = null;
		if (jj_2_3(2147483647)) {
			prefix = Identifier();
			jj_consume_token(COLON);
		}
		localPart = Identifier();
		if (prefix == null) {
			return localPart;
		} else {
			return prefix + ":" + localPart;
		}
	}

	private boolean jj_2_1(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_1();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(0, xla);
		}
	}

	private boolean jj_2_2(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_2();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(1, xla);
		}
	}

	private boolean jj_2_3(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_3();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(2, xla);
		}
	}

	private boolean jj_3R_69() {
		if (jj_scan_token(FLOATING_POINT_LITERAL)) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_18() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_scan_token(46)) {
			jj_scanpos = xsp;
			if (jj_scan_token(47)) {
				return true;
			}
		}
		if (jj_3R_17()) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_14() {
		if (jj_3R_17()) {
			return true;
		}
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_18()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_72() {
		if (jj_scan_token(COMMA)) {
			return true;
		}
		if (jj_3R_15()) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_68() {
		if (jj_scan_token(INTEGER_LITERAL)) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_28() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_scan_token(27)) {
			jj_scanpos = xsp;
			if (jj_scan_token(28)) {
				return true;
			}
		}
		return false;
	}

	private boolean jj_3_1() {
		if (jj_3R_11()) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_27() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_scan_token(21)) {
			jj_scanpos = xsp;
			if (jj_scan_token(22)) {
				return true;
			}
		}
		return false;
	}

	private boolean jj_3R_24() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_27()) {
			jj_scanpos = xsp;
			if (jj_3R_28()) {
				return true;
			}
		}
		if (jj_3R_23()) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_64() {
		if (jj_3R_15()) {
			return true;
		}
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_72()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_70() {
		if (jj_scan_token(STRING_LITERAL)) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_20() {
		if (jj_3R_14()) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_46() {
		if (jj_scan_token(EMPTY)) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_19() {
		if (jj_3R_11()) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_21() {
		if (jj_3R_23()) {
			return true;
		}
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_24()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_38() {
		if (jj_scan_token(MINUS)) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_45() {
		if (jj_scan_token(MINUS)) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_15() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_19()) {
			jj_scanpos = xsp;
			if (jj_3R_20()) {
				return true;
			}
		}
		return false;
	}

	private boolean jj_3R_37() {
		if (jj_scan_token(PLUS)) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_55() {
		if (jj_3R_12()) {
			return true;
		}
		if (jj_scan_token(LPAREN)) {
			return true;
		}
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_64()) {
			jj_scanpos = xsp;
		}
		if (jj_scan_token(RPAREN)) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_44() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_scan_token(42)) {
			jj_scanpos = xsp;
			if (jj_scan_token(43)) {
				return true;
			}
		}
		return false;
	}

	private boolean jj_3R_30() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_37()) {
			jj_scanpos = xsp;
			if (jj_3R_38()) {
				return true;
			}
		}
		if (jj_3R_29()) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_39() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_44()) {
			jj_scanpos = xsp;
			if (jj_3R_45()) {
				jj_scanpos = xsp;
				if (jj_3R_46()) {
					return true;
				}
			}
		}
		return false;
	}

	private boolean jj_3R_74() {
		if (jj_scan_token(FALSE)) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_35() {
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_39()) {
				jj_scanpos = xsp;
				break;
			}
		}
		if (jj_3R_40()) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_73() {
		if (jj_scan_token(TRUE)) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_67() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_73()) {
			jj_scanpos = xsp;
			if (jj_3R_74()) {
				return true;
			}
		}
		return false;
	}

	private boolean jj_3R_25() {
		if (jj_3R_29()) {
			return true;
		}
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_30()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3_2() {
		if (jj_3R_12()) {
			return true;
		}
		if (jj_scan_token(LPAREN)) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_56() {
		if (jj_scan_token(IDENTIFIER)) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_63() {
		if (jj_3R_71()) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_62() {
		if (jj_3R_70()) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_61() {
		if (jj_3R_69()) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_60() {
		if (jj_3R_68()) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_59() {
		if (jj_3R_67()) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_52() {
		if (jj_3R_56()) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_54() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_59()) {
			jj_scanpos = xsp;
			if (jj_3R_60()) {
				jj_scanpos = xsp;
				if (jj_3R_61()) {
					jj_scanpos = xsp;
					if (jj_3R_62()) {
						jj_scanpos = xsp;
						if (jj_3R_63()) {
							return true;
						}
					}
				}
			}
		}
		return false;
	}

	private boolean jj_3R_51() {
		if (jj_3R_55()) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_50() {
		if (jj_scan_token(LPAREN)) {
			return true;
		}
		if (jj_3R_15()) {
			return true;
		}
		if (jj_scan_token(RPAREN)) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_49() {
		if (jj_3R_54()) {
			return true;
		}
		return false;
	}

	private boolean jj_3_3() {
		if (jj_3R_13()) {
			return true;
		}
		if (jj_scan_token(COLON)) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_11() {
		if (jj_3R_14()) {
			return true;
		}
		if (jj_scan_token(COND)) {
			return true;
		}
		if (jj_3R_15()) {
			return true;
		}
		if (jj_scan_token(COLON)) {
			return true;
		}
		if (jj_3R_15()) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_47() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_49()) {
			jj_scanpos = xsp;
			if (jj_3R_50()) {
				jj_scanpos = xsp;
				if (jj_3R_51()) {
					jj_scanpos = xsp;
					if (jj_3R_52()) {
						return true;
					}
				}
			}
		}
		return false;
	}

	private boolean jj_3R_22() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_scan_token(44)) {
			jj_scanpos = xsp;
			if (jj_scan_token(45)) {
				return true;
			}
		}
		if (jj_3R_21()) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_16() {
		if (jj_3R_13()) {
			return true;
		}
		if (jj_scan_token(COLON)) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_66() {
		if (jj_scan_token(LBRACKET)) {
			return true;
		}
		if (jj_3R_15()) {
			return true;
		}
		if (jj_scan_token(RBRACKET)) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_17() {
		if (jj_3R_21()) {
			return true;
		}
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_22()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_34() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_scan_token(23)) {
			jj_scanpos = xsp;
			if (jj_scan_token(24)) {
				return true;
			}
		}
		return false;
	}

	private boolean jj_3R_33() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_scan_token(25)) {
			jj_scanpos = xsp;
			if (jj_scan_token(26)) {
				return true;
			}
		}
		return false;
	}

	private boolean jj_3R_32() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_scan_token(17)) {
			jj_scanpos = xsp;
			if (jj_scan_token(18)) {
				return true;
			}
		}
		return false;
	}

	private boolean jj_3R_12() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_16()) {
			jj_scanpos = xsp;
		}
		if (jj_3R_13()) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_31() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_scan_token(19)) {
			jj_scanpos = xsp;
			if (jj_scan_token(20)) {
				return true;
			}
		}
		return false;
	}

	private boolean jj_3R_26() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_31()) {
			jj_scanpos = xsp;
			if (jj_3R_32()) {
				jj_scanpos = xsp;
				if (jj_3R_33()) {
					jj_scanpos = xsp;
					if (jj_3R_34()) {
						return true;
					}
				}
			}
		}
		if (jj_3R_25()) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_65() {
		if (jj_scan_token(DOT)) {
			return true;
		}
		if (jj_3R_13()) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_43() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_scan_token(40)) {
			jj_scanpos = xsp;
			if (jj_scan_token(41)) {
				return true;
			}
		}
		return false;
	}

	private boolean jj_3R_23() {
		if (jj_3R_25()) {
			return true;
		}
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_26()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_42() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_scan_token(38)) {
			jj_scanpos = xsp;
			if (jj_scan_token(39)) {
				return true;
			}
		}
		return false;
	}

	private boolean jj_3R_48() {
		if (jj_3R_53()) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_13() {
		if (jj_scan_token(IDENTIFIER)) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_41() {
		if (jj_scan_token(MULTIPLY)) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_36() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_41()) {
			jj_scanpos = xsp;
			if (jj_3R_42()) {
				jj_scanpos = xsp;
				if (jj_3R_43()) {
					return true;
				}
			}
		}
		if (jj_3R_35()) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_40() {
		if (jj_3R_47()) {
			return true;
		}
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_48()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_58() {
		if (jj_3R_66()) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_71() {
		if (jj_scan_token(NULL)) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_29() {
		if (jj_3R_35()) {
			return true;
		}
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_36()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_57() {
		if (jj_3R_65()) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_53() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_57()) {
			jj_scanpos = xsp;
			if (jj_3R_58()) {
				return true;
			}
		}
		return false;
	}

	static {
		jj_la1_init_0();
		jj_la1_init_1();
	}

	/** Generated Token Manager. */
	public ELParserTokenManager token_source;

	SimpleCharStream jj_input_stream;

	/** Current token. */
	public Token token;

	/** Next token. */
	public Token jj_nt;

	private int jj_ntk;

	private Token jj_scanpos, jj_lastpos;

	private int jj_la;

	private int jj_gen;

	final private int[] jj_la1 = new int[35];

	static private int[] jj_la1_0;

	static private int[] jj_la1_1;

	private static void jj_la1_init_0() {
		jj_la1_0 = new int[] { 0x6, 0x6, 0x6, 0x20007580, 0x0, 0x0, 0x0, 0x0, 0x18600000, 0x600000, 0x18000000, 0x18600000, 0x79e0000,
				0x180000, 0x60000, 0x6000000, 0x1800000, 0x79e0000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10000, 0x20007580, 0x0,
				0x80000000, 0x20007580, 0x10000, 0x7580, 0x3000, };
	}

	private static void jj_la1_init_1() {
		jj_la1_1 = new int[] { 0x0, 0x0, 0x0, 0x50c10, 0xc000, 0xc000, 0x3000, 0x3000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
				0x18, 0x18, 0x3e0, 0xc0, 0x300, 0x3e0, 0x10c10, 0xc00, 0x10c10, 0x2, 0x0, 0x40000, 0x0, 0x50c10, 0x2, 0x0, 0x0, };
	}

	final private JJCalls[] jj_2_rtns = new JJCalls[3];

	private boolean jj_rescan = false;

	private int jj_gc = 0;

	/** Constructor with InputStream. */
	public ELParser(java.io.InputStream stream) {
		this(stream, null);
	}

	/** Constructor with InputStream and supplied encoding */
	public ELParser(java.io.InputStream stream, String encoding) {
		try {
			jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source = new ELParserTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 35; i++) {
			jj_la1[i] = -1;
		}
		for (int i = 0; i < jj_2_rtns.length; i++) {
			jj_2_rtns[i] = new JJCalls();
		}
	}

	/** Reinitialise. */
	public void ReInit(java.io.InputStream stream) {
		ReInit(stream, null);
	}

	/** Reinitialise. */
	public void ReInit(java.io.InputStream stream, String encoding) {
		try {
			jj_input_stream.ReInit(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 35; i++) {
			jj_la1[i] = -1;
		}
		for (int i = 0; i < jj_2_rtns.length; i++) {
			jj_2_rtns[i] = new JJCalls();
		}
	}

	/** Constructor. */
	public ELParser(java.io.Reader stream) {
		jj_input_stream = new SimpleCharStream(stream, 1, 1);
		token_source = new ELParserTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 35; i++) {
			jj_la1[i] = -1;
		}
		for (int i = 0; i < jj_2_rtns.length; i++) {
			jj_2_rtns[i] = new JJCalls();
		}
	}

	/** Reinitialise. */
	public void ReInit(java.io.Reader stream) {
		jj_input_stream.ReInit(stream, 1, 1);
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 35; i++) {
			jj_la1[i] = -1;
		}
		for (int i = 0; i < jj_2_rtns.length; i++) {
			jj_2_rtns[i] = new JJCalls();
		}
	}

	/** Constructor with generated Token Manager. */
	public ELParser(ELParserTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 35; i++) {
			jj_la1[i] = -1;
		}
		for (int i = 0; i < jj_2_rtns.length; i++) {
			jj_2_rtns[i] = new JJCalls();
		}
	}

	/** Reinitialise. */
	public void ReInit(ELParserTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 35; i++) {
			jj_la1[i] = -1;
		}
		for (int i = 0; i < jj_2_rtns.length; i++) {
			jj_2_rtns[i] = new JJCalls();
		}
	}

	private Token jj_consume_token(int kind) throws ELParseException {
		Token oldToken;
		if ((oldToken = token).next != null) {
			token = token.next;
		} else {
			token = token.next = token_source.getNextToken();
		}
		jj_ntk = -1;
		if (token.kind == kind) {
			jj_gen++;
			if (++jj_gc > 100) {
				jj_gc = 0;
				for (JJCalls jj_2_rtn : jj_2_rtns) {
					JJCalls c = jj_2_rtn;
					while (c != null) {
						if (c.gen < jj_gen) {
							c.first = null;
						}
						c = c.next;
					}
				}
			}
			return token;
		}
		token = oldToken;
		jj_kind = kind;
		throw generateParseException();
	}

	/*****************************************
	 * GRAMMAR PRODUCTIONS *
	 *****************************************/

	static private final class LookaheadSuccess extends java.lang.Error {
		private static final long serialVersionUID = 1L;
	}

	final private LookaheadSuccess jj_ls = new LookaheadSuccess();

	private boolean jj_scan_token(int kind) {
		if (jj_scanpos == jj_lastpos) {
			jj_la--;
			if (jj_scanpos.next == null) {
				jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
			} else {
				jj_lastpos = jj_scanpos = jj_scanpos.next;
			}
		} else {
			jj_scanpos = jj_scanpos.next;
		}
		if (jj_rescan) {
			int i = 0;
			Token tok = token;
			while (tok != null && tok != jj_scanpos) {
				i++;
				tok = tok.next;
			}
			if (tok != null) {
				jj_add_error_token(kind, i);
			}
		}
		if (jj_scanpos.kind != kind) {
			return true;
		}
		if (jj_la == 0 && jj_scanpos == jj_lastpos) {
			throw jj_ls;
		}
		return false;
	}

	/** Get the next Token. */
	final public Token getNextToken() {
		if (token.next != null) {
			token = token.next;
		} else {
			token = token.next = token_source.getNextToken();
		}
		jj_ntk = -1;
		jj_gen++;
		return token;
	}

	/** Get the specific Token. */
	final public Token getToken(int index) {
		Token t = token;
		for (int i = 0; i < index; i++) {
			if (t.next != null) {
				t = t.next;
			} else {
				t = t.next = token_source.getNextToken();
			}
		}
		return t;
	}

	private int jj_ntk() {
		if ((jj_nt = token.next) == null) {
			return jj_ntk = (token.next = token_source.getNextToken()).kind;
		} else {
			return jj_ntk = jj_nt.kind;
		}
	}

	private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();

	private int[] jj_expentry;

	private int jj_kind = -1;

	private int[] jj_lasttokens = new int[100];

	private int jj_endpos;

	private void jj_add_error_token(int kind, int pos) {
		if (pos >= 100) {
			return;
		}
		if (pos == jj_endpos + 1) {
			jj_lasttokens[jj_endpos++] = kind;
		} else if (jj_endpos != 0) {
			jj_expentry = new int[jj_endpos];
			for (int i = 0; i < jj_endpos; i++) {
				jj_expentry[i] = jj_lasttokens[i];
			}
			jj_entries_loop: for (Object name : jj_expentries) {
				int[] oldentry = (int[]) name;
				if (oldentry.length == jj_expentry.length) {
					for (int i = 0; i < jj_expentry.length; i++) {
						if (oldentry[i] != jj_expentry[i]) {
							continue jj_entries_loop;
						}
					}
					jj_expentries.add(jj_expentry);
					break jj_entries_loop;
				}
			}
			if (pos != 0) {
				jj_lasttokens[(jj_endpos = pos) - 1] = kind;
			}
		}
	}

	/** Generate ParseException. */
	public ELParseException generateParseException() {
		jj_expentries.clear();
		boolean[] la1tokens = new boolean[55];
		if (jj_kind >= 0) {
			la1tokens[jj_kind] = true;
			jj_kind = -1;
		}
		for (int i = 0; i < 35; i++) {
			if (jj_la1[i] == jj_gen) {
				for (int j = 0; j < 32; j++) {
					if ((jj_la1_0[i] & 1 << j) != 0) {
						la1tokens[j] = true;
					}
					if ((jj_la1_1[i] & 1 << j) != 0) {
						la1tokens[32 + j] = true;
					}
				}
			}
		}
		for (int i = 0; i < 55; i++) {
			if (la1tokens[i]) {
				jj_expentry = new int[1];
				jj_expentry[0] = i;
				jj_expentries.add(jj_expentry);
			}
		}
		jj_endpos = 0;
		jj_rescan_token();
		jj_add_error_token(0, 0);
		int[][] exptokseq = new int[jj_expentries.size()][];
		for (int i = 0; i < jj_expentries.size(); i++) {
			exptokseq[i] = jj_expentries.get(i);
		}
		return new ELParseException(token, exptokseq, tokenImage);
	}

	/** Enable tracing. */
	final public void enable_tracing() {
	}

	/** Disable tracing. */
	final public void disable_tracing() {
	}

	private void jj_rescan_token() {
		jj_rescan = true;
		for (int i = 0; i < 3; i++) {
			try {
				JJCalls p = jj_2_rtns[i];
				do {
					if (p.gen > jj_gen) {
						jj_la = p.arg;
						jj_lastpos = jj_scanpos = p.first;
						switch (i) {
						case 0:
							jj_3_1();
							break;
						case 1:
							jj_3_2();
							break;
						case 2:
							jj_3_3();
							break;
						}
					}
					p = p.next;
				} while (p != null);
			} catch (LookaheadSuccess ls) {
			}
		}
		jj_rescan = false;
	}

	private void jj_save(int index, int xla) {
		JJCalls p = jj_2_rtns[index];
		while (p.gen > jj_gen) {
			if (p.next == null) {
				p = p.next = new JJCalls();
				break;
			}
			p = p.next;
		}
		p.gen = jj_gen + xla - jj_la;
		p.first = token;
		p.arg = xla;
	}

	static final class JJCalls {
		int gen;
		Token first;
		int arg;
		JJCalls next;
	}

}
